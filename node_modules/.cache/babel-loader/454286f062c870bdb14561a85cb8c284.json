{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rodriggolima/Documents/GitHub/app_uncisal/pygus-backoffice/src/Components/Login/LoginContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // Modules\n\nimport { message } from 'antd'; // Components\n\nimport LoginView from './LoginView';\n\nconst LoginContainer = props => {\n  _s();\n\n  /**\n   * Login method.\n   */\n  const [loginForm, setLoginForm] = useState({\n    email: null,\n    password: null\n  });\n  const [loginButtonLoading, setLoginButtonLoading] = useState(false);\n  const [saveLoginInfo, setSaveLoginInfo] = useState(false);\n\n  const login = async () => {\n    setLoginButtonLoading(true); // Call API\n\n    let apiResponse = await fetch('/auth/login-admin', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(loginForm)\n    });\n    apiResponse = await apiResponse.json(); // Check if response was successfuly\n\n    if (apiResponse.code === 200) {\n      // Save JWT in storage\n      if (saveLoginInfo) {\n        await localStorage.setItem('access_token', apiResponse.data['token']);\n      } else {\n        await sessionStorage.setItem('access_token', apiResponse.data['token']);\n      }\n\n      props.history.push('/home');\n    } else {\n      message.error(apiResponse.message);\n    }\n\n    setLoginButtonLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoginView, {\n    loginForm: loginForm,\n    setLoginForm: form => setLoginForm({ ...form\n    }),\n    login: () => login(),\n    loginButtonLoading: loginButtonLoading,\n    saveLoginInfo: saveLoginInfo,\n    setSaveLoginInfo: e => setSaveLoginInfo(e)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginContainer, \"Y/f8jOE234LcNZimbgoM6q9Uo/s=\");\n\n_c = LoginContainer;\nexport default LoginContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginContainer\");","map":{"version":3,"sources":["/Users/rodriggolima/Documents/GitHub/app_uncisal/pygus-backoffice/src/Components/Login/LoginContainer.jsx"],"names":["React","useState","message","LoginView","LoginContainer","props","loginForm","setLoginForm","email","password","loginButtonLoading","setLoginButtonLoading","saveLoginInfo","setSaveLoginInfo","login","apiResponse","fetch","headers","method","body","JSON","stringify","json","code","localStorage","setItem","data","sessionStorage","history","push","error","form","e"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,SAASC,OAAT,QAAwB,MAAxB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAE9B;AACJ;AACA;AACI,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BN,QAAQ,CAAC;AAAEO,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,QAAQ,EAAE;AAAzB,GAAD,CAA5C;AACA,QAAM,CAAEC,kBAAF,EAAsBC,qBAAtB,IAAgDV,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAM,CAAEW,aAAF,EAAiBC,gBAAjB,IAAsCZ,QAAQ,CAAC,KAAD,CAApD;;AACA,QAAMa,KAAK,GAAG,YAAY;AAEtBH,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CAFsB,CAItB;;AACA,QAAII,WAAW,GAAG,MAAMC,KAAK,CAAC,mBAAD,EAC7B;AACIC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OADb;AAKIC,MAAAA,MAAM,EAAE,MALZ;AAMIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,SAAf;AANV,KAD6B,CAA7B;AASAS,IAAAA,WAAW,GAAG,MAAMA,WAAW,CAACO,IAAZ,EAApB,CAdsB,CAgBtB;;AACA,QAAGP,WAAW,CAACQ,IAAZ,KAAqB,GAAxB,EAA4B;AAExB;AACA,UAAGX,aAAH,EAAiB;AACb,cAAMY,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCV,WAAW,CAACW,IAAZ,CAAiB,OAAjB,CAArC,CAAN;AACH,OAFD,MAEO;AACH,cAAMC,cAAc,CAACF,OAAf,CAAuB,cAAvB,EAAuCV,WAAW,CAACW,IAAZ,CAAiB,OAAjB,CAAvC,CAAN;AACH;;AACDrB,MAAAA,KAAK,CAACuB,OAAN,CAAcC,IAAd,CAAmB,OAAnB;AAEH,KAVD,MAUO;AAEH3B,MAAAA,OAAO,CAAC4B,KAAR,CAAcf,WAAW,CAACb,OAA1B;AAEH;;AAEDS,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACH,GAlCD;;AAoCA,sBAEI,QAAC,SAAD;AAEI,IAAA,SAAS,EAAEL,SAFf;AAGI,IAAA,YAAY,EAAEyB,IAAI,IAAIxB,YAAY,CAAC,EAAC,GAAGwB;AAAJ,KAAD,CAHtC;AAKI,IAAA,KAAK,EAAE,MAAMjB,KAAK,EALtB;AAMI,IAAA,kBAAkB,EAAEJ,kBANxB;AAQI,IAAA,aAAa,EAAEE,aARnB;AASI,IAAA,gBAAgB,EAAEoB,CAAC,IAAInB,gBAAgB,CAACmB,CAAD;AAT3C;AAAA;AAAA;AAAA;AAAA,UAFJ;AAiBH,CA7DD;;GAAM5B,c;;KAAAA,c;AA+DN,eAAeA,cAAf","sourcesContent":["import React, { useState } from 'react';\n\n// Modules\nimport { message } from 'antd';\n\n// Components\nimport LoginView from './LoginView';\n\nconst LoginContainer = (props) => {\n\n    /**\n     * Login method.\n     */\n    const [ loginForm, setLoginForm ] = useState({ email: null, password: null });\n    const [ loginButtonLoading, setLoginButtonLoading ] = useState(false);\n    const [ saveLoginInfo, setSaveLoginInfo ] = useState(false);\n    const login = async () => {\n\n        setLoginButtonLoading(true);\n\n        // Call API\n        let apiResponse = await fetch('/auth/login-admin', \n        { \n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'POST', \n            body: JSON.stringify(loginForm)\n        });\n        apiResponse = await apiResponse.json();\n\n        // Check if response was successfuly\n        if(apiResponse.code === 200){\n\n            // Save JWT in storage\n            if(saveLoginInfo){\n                await localStorage.setItem('access_token', apiResponse.data['token']);\n            } else {\n                await sessionStorage.setItem('access_token', apiResponse.data['token']);\n            }\n            props.history.push('/home');\n            \n        } else {\n            \n            message.error(apiResponse.message);\n            \n        }\n        \n        setLoginButtonLoading(false);\n    }\n\n    return(\n\n        <LoginView\n\n            loginForm={loginForm}\n            setLoginForm={form => setLoginForm({...form})}\n            \n            login={() => login()}\n            loginButtonLoading={loginButtonLoading}\n            \n            saveLoginInfo={saveLoginInfo}\n            setSaveLoginInfo={e => setSaveLoginInfo(e)}\n\n        />\n\n    )\n\n};\n\nexport default LoginContainer;"]},"metadata":{},"sourceType":"module"}