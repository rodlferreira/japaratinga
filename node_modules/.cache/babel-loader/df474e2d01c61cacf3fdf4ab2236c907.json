{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rodriggolima/Documents/GitHub/app_uncisal/pygus-backoffice/src/Components/Error404/Error404Container.jsx\";\nimport React, { useState } from 'react'; // Modules\n\nimport { message } from 'antd'; // Components\n\nimport LoginView from './Error404View';\n\nconst Error404Container = props => {\n  // const [ loginForm, setLoginForm ] = useState({ email: null, password: null });\n  // const [ loginButtonLoading, setLoginButtonLoading ] = useState(false);\n  // const [ saveLoginInfo, setSaveLoginInfo ] = useState(false);\n  const error404 = async () => {\n    setError404(true); // Call API\n\n    let apiResponse = await fetch('/home/error404', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(error404)\n    });\n    apiResponse = await apiResponse.json(); // Check if response was successfuly\n\n    if (apiResponse.code === 200) {\n      // Save JWT in storage\n      if (saveLoginInfo) {\n        await localStorage.setItem('access_token', apiResponse.data['token']);\n      } else {\n        await sessionStorage.setItem('access_token', apiResponse.data['token']);\n      }\n\n      props.history.push('/home');\n    } else {\n      message.error(apiResponse.message);\n    }\n\n    setLoginButtonLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoginView, {\n    loginForm: loginForm,\n    setLoginForm: form => setLoginForm({ ...form\n    }),\n    login: () => login(),\n    loginButtonLoading: loginButtonLoading,\n    saveLoginInfo: saveLoginInfo,\n    setSaveLoginInfo: e => setSaveLoginInfo(e)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Error404Container;\nexport default LoginContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Error404Container\");","map":{"version":3,"sources":["/Users/rodriggolima/Documents/GitHub/app_uncisal/pygus-backoffice/src/Components/Error404/Error404Container.jsx"],"names":["React","useState","message","LoginView","Error404Container","props","error404","setError404","apiResponse","fetch","headers","method","body","JSON","stringify","json","code","saveLoginInfo","localStorage","setItem","data","sessionStorage","history","push","error","setLoginButtonLoading","loginForm","form","setLoginForm","login","loginButtonLoading","e","setSaveLoginInfo","LoginContainer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,SAASC,OAAT,QAAwB,MAAxB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAEjC;AACA;AACA;AACA,QAAMC,QAAQ,GAAG,YAAY;AAEzBC,IAAAA,WAAW,CAAC,IAAD,CAAX,CAFyB,CAIzB;;AACA,QAAIC,WAAW,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAC7B;AACIC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OADb;AAKIC,MAAAA,MAAM,EAAE,MALZ;AAMIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AANV,KAD6B,CAA7B;AASAE,IAAAA,WAAW,GAAG,MAAMA,WAAW,CAACO,IAAZ,EAApB,CAdyB,CAgBzB;;AACA,QAAGP,WAAW,CAACQ,IAAZ,KAAqB,GAAxB,EAA4B;AAExB;AACA,UAAGC,aAAH,EAAiB;AACb,cAAMC,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCX,WAAW,CAACY,IAAZ,CAAiB,OAAjB,CAArC,CAAN;AACH,OAFD,MAEO;AACH,cAAMC,cAAc,CAACF,OAAf,CAAuB,cAAvB,EAAuCX,WAAW,CAACY,IAAZ,CAAiB,OAAjB,CAAvC,CAAN;AACH;;AACDf,MAAAA,KAAK,CAACiB,OAAN,CAAcC,IAAd,CAAmB,OAAnB;AAEH,KAVD,MAUO;AAEHrB,MAAAA,OAAO,CAACsB,KAAR,CAAchB,WAAW,CAACN,OAA1B;AAEH;;AAEDuB,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACH,GAlCD;;AAoCA,sBAEI,QAAC,SAAD;AAEI,IAAA,SAAS,EAAEC,SAFf;AAGI,IAAA,YAAY,EAAEC,IAAI,IAAIC,YAAY,CAAC,EAAC,GAAGD;AAAJ,KAAD,CAHtC;AAKI,IAAA,KAAK,EAAE,MAAME,KAAK,EALtB;AAMI,IAAA,kBAAkB,EAAEC,kBANxB;AAQI,IAAA,aAAa,EAAEb,aARnB;AASI,IAAA,gBAAgB,EAAEc,CAAC,IAAIC,gBAAgB,CAACD,CAAD;AAT3C;AAAA;AAAA;AAAA;AAAA,UAFJ;AAiBH,CA1DD;;KAAM3B,iB;AA4DN,eAAe6B,cAAf","sourcesContent":["import React, { useState } from 'react';\n\n// Modules\nimport { message } from 'antd';\n\n// Components\nimport LoginView from './Error404View';\n\nconst Error404Container = (props) => {\n\n    // const [ loginForm, setLoginForm ] = useState({ email: null, password: null });\n    // const [ loginButtonLoading, setLoginButtonLoading ] = useState(false);\n    // const [ saveLoginInfo, setSaveLoginInfo ] = useState(false);\n    const error404 = async () => {\n\n        setError404(true);\n\n        // Call API\n        let apiResponse = await fetch('/home/error404',\n        { \n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'POST', \n            body: JSON.stringify(error404)\n        });\n        apiResponse = await apiResponse.json();\n\n        // Check if response was successfuly\n        if(apiResponse.code === 200){\n\n            // Save JWT in storage\n            if(saveLoginInfo){\n                await localStorage.setItem('access_token', apiResponse.data['token']);\n            } else {\n                await sessionStorage.setItem('access_token', apiResponse.data['token']);\n            }\n            props.history.push('/home');\n            \n        } else {\n            \n            message.error(apiResponse.message);\n            \n        }\n        \n        setLoginButtonLoading(false);\n    }\n\n    return(\n\n        <LoginView\n\n            loginForm={loginForm}\n            setLoginForm={form => setLoginForm({...form})}\n            \n            login={() => login()}\n            loginButtonLoading={loginButtonLoading}\n            \n            saveLoginInfo={saveLoginInfo}\n            setSaveLoginInfo={e => setSaveLoginInfo(e)}\n\n        />\n\n    )\n\n};\n\nexport default LoginContainer;"]},"metadata":{},"sourceType":"module"}